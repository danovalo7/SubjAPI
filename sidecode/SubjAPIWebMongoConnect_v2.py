import pymongo
import json
from bson.decimal128 import Decimal128 as Decimal
import datetime
from bson.son import SON
import bson
from operator import itemgetter

fromisoformat = datetime.datetime.fromisoformat
utc = datetime.timezone.utc


def get_bson(filename):
    with open(filename, "r", encoding="utf-8") as file:
        bson_data = sorted(json.load(file, object_pairs_hook=SON), key=itemgetter('id'))
    for item in bson_data:
        item["date_indexed"] = fromisoformat(item["date_indexed"]).astimezone(utc).replace(tzinfo=None)
        if item.get("date_modified", False):
            item["date_modified"] = fromisoformat(item["date_modified"]).astimezone(utc).replace(tzinfo=None)
        if item.get("credits", False):
            item["credits"] = Decimal(item["credits"])
        for drow in [r for r in item if item[r] is None]:
            del item[drow]
    return bson_data


username = "admin"
password = "[REDACTED]"
database_name = "subjapidb"
shards = "[REDACTED]"
connection_string = f"mongodb://{username}:{password}@{shards}/{database_name}?ssl=true&replicaSet=atlas-25b24y-shard-0&authSource=admin&retryWrites=true"

client = pymongo.MongoClient(connection_string, tz_aware=True, w="majority", fsync=True, compressors=["zstd"])
database = client[database_name]

print("dropping collection")
database.drop_collection("subjects")

print("creating validator")
val = {'$jsonSchema': {'bsonType': 'object', 'required': ['id', 'exists', 'date_indexed'], 'properties': {
    '_id': {'bsonType': 'objectId', 'title': 'MongoDB ID object', 'description': 'ID which identifies the document in MongoDB collection; autogenerated, required, unique, ObjectID'},
    'id': {'bsonType': 'int', 'title': 'ID', 'description': 'URL id of this subject; required, unique, integer likely between 1 and 300000'},
    'exists': {'bsonType': 'bool', 'title': 'Exists', 'description': 'Whether subject exists in school db; required, boolean'},
    'date_indexed': {'bsonType': 'date', 'title': 'Date indexed', 'description': 'Date on which subject was added to SubjAPI db; required, date'},
    'code': {'bsonType': 'string', 'title': 'Code', 'description': 'Identifying code meant for humans, not used in school db; very short (6 chars) alphanumeric string'},
    'name': {'bsonType': 'string', 'title': 'Name', 'description': 'Name of subject, including the short at the end; somewhat short (~50 chars) string'},
    'short': {'bsonType': 'string', 'title': 'Short', 'description': "Short abbreviation of the subject's name, in name's paretheses; very short (3-5 chars generally) uppercase alphanumeric string"},
    'credits': {'bsonType': 'decimal', 'title': 'Credits', 'description': 'Number of credits gained when completing this subject; high-accuracy decimal'},
    'students_evaluated': {'bsonType': 'int', 'title': 'Students evaluated', 'description': 'Number of students who took the subject (likely not everyone); integer between 0 and approx. 1000'},
    'average_grade': {'bsonType': 'string', 'enum': ['A', 'B', 'C', 'D', 'E', 'F', 'X'], 'title': 'Average grade',
                      'description': "Average grade for all students who took this subject; enum, X means data is wrong (all 0's)"},
    'description_length': {'bsonType': 'int', 'title': 'Description length',
                           'description': "Total length of the subject's description, is a sum of multiple fields; integer, apparently ~205 characters are automatically generated so 205 is essentially 0"},
    'date_modified': {'bsonType': 'date', 'title': 'Date modified',
                      'description': "Date on which subject was last modified in school's database; date, generally far in the past means subject is dead"}}}}

print("creating collection")
database.create_collection("subjects", validator=val)
collection = database.subjects

print("creating indexes")
collection.create_index("id", unique=True)

print("loading data")
with open("subjects.bson", "rb") as file:
    data = bson.decode_all(file.read())

print("inserting data")
collection.insert_many(data, ordered=True)

print("done")

#  - already done

# print("modding data")
# data = get_bson("subjapi.json")

# print("saving data")
# ba = bytearray()
# for item in data:
#     ba += bson.encode(item)
# with open("subjects.bson", "w+b") as bytefile:
#     bytefile.write(bytes(ba))

# coll.insert_many(data, ordered=True)
# coll.create_index("id", unique=True)
# val = {'$jsonSchema': {'bsonType': 'object', 'required': ['id', 'exists', 'date_indexed'], 'properties': {'id': {'bsonType': 'int', 'description': 'URL id of this subject; required, unique, integer likely between 1 and 300000'}, 'exists': {'bsonType': 'bool', 'description': 'Whether subject exists in school db; required, boolean'}, 'date_indexed': {'bsonType': 'date', 'description': 'Date on which subject was added to SubjAPI db; required, date'}, 'code': {'bsonType': 'string', 'description': 'Identifying code meant for humans, not used in school db; very short (6 chars) alphanumeric string'}, 'name': {'bsonType': 'string', 'description': 'Name of subject, including the short at the end; somewhat short (~50 chars) string'}, 'short': {'bsonType': 'string', 'description': "Short abbreviation of the subject's name, in name's paretheses; very short (3-5 chars generally) uppercase alphanumeric string"}, 'credits': {'bsonType': 'decimal', 'description': 'Number of credits gained when completing this subject; high-accuracy decimal'}, 'students_evaluated': {'bsonType': 'string', 'description': 'Number of students who took the subject (likely not everyone); integer between 0 and approx. 1000'}, 'average_grade': {'enum': ['A', 'B', 'C', 'D', 'E', 'F', 'X', None], 'description': "Average grade for all students who took this subject; enum, X means data is wrong (all 0's), null means no data"}, 'description_length': {'bsonType': 'int', 'description': "Total length of the subject's description, is a sum of multiple fields; integer, apparently ~205 characters are automatically generated so 205 is essentially 0"}, 'date_modified': {'bsonType': 'date', 'description': "Date on which subject was last modified in school's database; date, generally far in the past means subject is dead"}}}}
# db.command("collMod", "subjects", validator=val)

#  - useless
# sk = pymongo.collation.Collation(locale="sk@collation=search", strength=2, alternate="shifted", numericOrdering=True)
# coll.create_index([("name", "text")], sparse=True)
